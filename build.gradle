plugins {
    id 'org.screamingsandals.plugin-builder' version "${SCREAMING_PLUGIN_BUILDER_VERSION}" apply false
    id 'org.screamingsandals.nms-mapper' version "${NMS_MAPPER_VERSION}" apply false
}

defaultTasks 'clean', 'screamCompile'//, 'allowJavadocUpload'

allprojects {
    group = 'org.screamingsandals.lib'
    version = SCREAMING_LIB_VERSION
}

subprojects {
    ext.includeModule = { String module ->
        if (!project.name.endsWith('-common')) {
            throw new UnsupportedOperationException("This method can be used only in common modules!")
        }

        dependencies {
            api project(":${module}-common")
        }

        rootProject.subprojects.each { Project sub ->
            if (!sub.name.endsWith('-common') && sub.name.matches("${project.name.replace('-common', '')}-[^-]+")) {
                var moduleProject = rootProject.findProject(":${module}-${sub.name.split("-")[1]}")
                if (moduleProject != null) {
                    sub.dependencies {
                        api moduleProject
                    }
                }
            }
        }
    }

    if (!project.file('src').exists() && !project.file('build.gradle').exists()) {
        project.ext['onlyPomArtifact'] = true

        apply plugin: 'org.screamingsandals.plugin-builder-lite'
    } else {
        apply plugin: 'java'
        apply plugin: 'java-library'
        apply plugin: 'org.screamingsandals.plugin-builder'
    }

    if (project.name.matches('[a-z]+-[a-z]+') && !project.name.endsWith("-common")) {
        boolean foundAnotherModule = false
        // modules for NMS based platforms can have shared vanilla modules
        if (project.name.split('-')[1] in ['bukkit', 'sponge']) {
            def vanillaProject = rootProject.findProject(":${project.name.split('-')[0]}-vanilla")
            if (vanillaProject != null) {
                dependencies {
                    api vanillaProject
                }
                foundAnotherModule = true
            }
        }

        if (!foundAnotherModule) {
            def commonProject = rootProject.findProject(":${project.name.split('-')[0]}-common")
            if (commonProject != null) {
                dependencies {
                    api commonProject
                }
            }
        }
    }

    java {
        disableAutoTargetJvm()
    }

    repositories {
        minecraftLibraries()
        jitpack()
        sponge()
        velocity()
        placeholderApi()
        paper()
        screaming()
    }

    sourceCompatibility = JavaVersion.VERSION_11
}
