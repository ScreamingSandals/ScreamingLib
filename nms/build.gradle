import java.util.concurrent.atomic.AtomicInteger
import java.util.function.Consumer
import java.util.function.Supplier

plugins {
    alias libs.plugins.takenaka
}

enableShadowPlugin()

sourceSets.main.java.srcDirs += 'src/generated/java'

dependencies {
    mappingBundle libs.takenaka.mappings
    implementation libs.takenaka.runtime
}

shadowJar {
    relocate 'me.kcra.takenaka.accessor', 'org.screamingsandals.lib.impl.ext.takenaka'
}

// after any changes in this file, please run the generateAccessors task to see changes in your ide

accessors {

    /*
    * TODO:
    *  1. Try to replace most non-mojang names with mojang name or spigot/yarn name
    *  2. Make sure this file works
    *  3. Validate against old configuration
    *  4. Update Slib
    *
    */

    // uncomment this and remove the mappingBundle dependency,
    // if you want to develop against custom versions
    /*versionRange('1.8.8', '1.20.4') {
        // exclude 1.16 and 1.10.1, they don't have most mappings and are basically not used at all
        // exclude 1.8.9, client-only update - no Spigot mappings, no thank you
        // exclude 1.9.1 and 1.9.3 - no mappings at all
        exclude '1.16', '1.10.1', '1.8.9', '1.9.1', '1.9.3'

        // include only releases, no snapshots
        includeTypes 'release'
    }*/

    basePackage 'org.screamingsandals.lib.impl.nms.accessors'
    accessedNamespaces 'spigot'
    accessorType 'reflection'

    var ResourceLocation = mapClass('net.minecraft.resources.ResourceLocation') {
        constructor(String)
    }

    var Component = mapClass('net.minecraft.network.chat.Component') {
        getter(String, 'coloredString') //method String, 'func_150254_d' // get legacy string
    }

    var EntityType = mapClass('net.minecraft.world.entity.EntityType') {
        method(Optional, 'byString', String) // 1.14+
        method(it.name, 'func_200713_a', String) // 1.13.X
        field('net.minecraft.util.registry.RegistryNamespaced', 'field_191308_b') // 1.11 - 1.12.2 - map from resource location to class type
        field(Map, 'field_75624_e') // <= 1.10.2

        field(Map, 'field_75625_b') // <= 1.10.2 - map from string to class type
        method(Class, 'func_201760_c') // 1.13.X - entity class type
        field('net.minecraft.world.entity.EntityType$EntityFactory', 'factory') // 1.14+ - factory method
    }

    var Registry = mapClass('net.minecraft.core.Registry') {
        field('net.minecraft.core.DefaultedRegistry', 'ENTITY_TYPE') // <= 1.19.2
        method(ResourceLocation, 'getId', Object)
    }

    var BuiltInRegistries = mapClass('net.minecraft.core.registries.BuiltInRegistries') {
        field('net.minecraft.core.DefaultedRegistry', 'ENTITY_TYPE')
    }

    var MappedRegistry = mapClass('net.minecraft.core.MappedRegistry') {
        method(int, 'func_148757_b', Object)
        method(Object, 'get', ResourceLocation) // 1.13.1+
        method(Object, 'get', Object) // <= 1.13
    }

    var SynchedEntityData = mapClass('net.minecraft.network.syncher.SynchedEntityData') {
        method(Object, 'watch', int, Object) // 1.8.8 compat - bossbar - 1.8.8 ONLY method
    }

    var Level = mapClass('net.minecraft.world.level.Level') {
        getter(Supplier, 'profilerSupplier') // 1.17 and newer
        getter('net.minecraft.util.profiling.ProfilerFiller', 'profiler') // for something between new and old versions
        field('net.minecraft.util.profiling.ActiveProfiler', 'methodProfiler') // for older versions, Spigot mapped
    }

    var Entity = mapClass('net.minecraft.world.entity.Entity') {
        getter(SynchedEntityData, 'entityData') // DataWatcher
        getter(Level, 'commandSenderWorld') // world
        getter(double, 'x')
        getter(double, 'y')
        getter(double, 'z')
        getter(float, 'yRot')
        getter(float, 'xRot')
        getter(EntityType, 'type')
        getter(int, 'id')
        setter(boolean, 'noGravity')
        getter(boolean, 'noGravity')
        setter(boolean, 'onGround')
        getter(boolean, 'onGround')
        getter(UUID, 'UUID')
        setter(boolean, 'customNameVisible')
        getter(boolean, 'customNameVisible')
        setter(boolean, 'invisible')
        getter(boolean, 'invisible')
        getter('net.minecraft.world.phys.Vec3', 'deltaMovement')
        method(void, 'func_96094_a', String) // setCustomName
        setter(Component, 'customName')
        method(void, 'absMoveTo', double, double, double, float, float)
        getter(Component, 'customName')
        method(boolean, 'startRiding', it.name, boolean)
        method(void, 'stopRiding')
        field(double, 'field_70159_w') // velocity x
        field(double, 'field_70181_x') // velocity y
        field(double, 'field_70179_y') // velocity z
        field(int, 'field_70152_a')
        field(boolean, 'onGround')
        field(int, 'id')
        field(AtomicInteger, 'ENTITY_COUNTER')
        field(float, 'field_70177_z') // yaw
        field(float, 'field_70125_A') // pitch
        field(double, 'field_70165_t') // locX
        field(double, 'field_70163_u') // locY
        field(double, 'field_70161_v') // locZ
        field(Level, 'field_70170_p') // world
    }

    var InteractionHand = mapClass('net.minecraft.world.InteractionHand') {
        enumConstant('MAIN_HAND')
        enumConstant('OFF_HAND')
    }

    // 1.8.8 compat - Attributes (LivingEntity requires to be defined earlier)
    var Attribute = mapClass('net.minecraft.world.entity.ai.attributes.Attribute') {
        getter(double, 'defaultValue')
    }

    var CombatTracker = mapClass('net.minecraft.world.damagesource.CombatTracker') {
        getter(Component, 'deathMessage')
        method(void, 'recheckStatus')
    }

    var LivingEntity = mapClass('net.minecraft.world.entity.LivingEntity') { // 1.8.8 compat - BossBar
        method('net.minecraft.world.entity.ai.attributes.AttributeInstance', 'getAttributeInstance', Attribute) // 1.8.8 compat - Attributes
        field(int, 'removeArrowTime')
        getter(int, 'arrowCount')
        setter(int, 'arrowCount')
        method(boolean, 'doHurtTarget', Entity)
        method(void, 'swing', InteractionHand)
        getter(float, 'absorptionAmount')
        setter(float, 'setAbsorptionAmount')
        getter('net.minecraft.world.entity.ai.attributes.AttributeMap', 'attributes')
        getter(CombatTracker, 'combatTracker')
    }

    var Mob = mapClass('net.minecraft.world.entity.Mob') {
        setter(boolean, 'noAI') // 1.8.8
        getter(boolean, 'noAi') // 1.8.8
        setter(LivingEntity, 'target')
        getter(LivingEntity, 'target')

        field('net.minecraft.world.entity.ai.goal.GoalSelector', 'goalSelector')
        field('net.minecraft.world.entity.ai.goal.GoalSelector', 'targetSelector')
    }

    var PathfinderMob = mapClass('net.minecraft.world.entity.PathfinderMob')
    // end 1.8.8 compat


    var Component$Serializer = mapClass('net.minecraft.network.chat.Component$Serializer') {
        method(Component, 'func_150699_a', String) // up to 1.15.2
        method('net.minecraft.network.chat.MutableComponent', 'm_130701_', String) // 1.16.1+
    }

    var Rotations = mapClass('net.minecraft.core.Rotations') {
        constructor(float, float, float)
        getter(float, 'x')
        getter(float, 'y')
        getter(float, 'z')
    }

    var Goal = mapClass('net.minecraft.world.entity.ai.goal.Goal') {
        method(boolean, 'canUse')
        method(boolean, 'canContinueToUse')
        method(void, 'start')
        method(void, 'stop')
        method(void, 'tick')

        getter(EnumSet, 'flags') // >= 1.14
    }

    var Goal$Flag = mapClass('net.minecraft.world.entity.ai.goal.Goal$Flag') {
        enumConstant('TARGET')
    }

    var GoalSelector = mapClass('net.minecraft.world.entity.ai.goal.GoalSelector') {
        constructor(Supplier)

        field(Set, 'availableGoals') // 1.14+
        fieldChain {
            item(List, 'field_75782_a')
            item(Set, 'field_75782_a') // 1.8.8
        }

        method(void, 'addGoal', int, Goal)
        method(void, 'removeGoal', Goal)
    }

    var WrappedGoal = mapClass('net.minecraft.world.entity.ai.goal.WrappedGoal') { // 1.14+
        getter(Goal, 'goal')
    }

    mapClass('net.minecraft.server.VVV.PathfinderGoalSelector$PathfinderGoalSelectorItem') { // 1.8.8-1.13.2
        field(Goal, 'field_75733_a')
    }

    // Goals
    mapClass('net.minecraft.world.entity.ai.goal.AvoidEntityGoal')
    mapClass('net.minecraft.world.entity.ai.goal.BegGoal')
    mapClass('net.minecraft.world.entity.ai.goal.BreakDoorGoal')
    mapClass('net.minecraft.world.entity.ai.goal.BreathAirGoal')
    mapClass('net.minecraft.world.entity.ai.goal.BreedGoal')
    mapClass('net.minecraft.world.entity.ai.goal.CatLieOnBedGoal')
    mapClass('net.minecraft.world.entity.ai.goal.CatSitOnBlockGoal')
    mapClass('net.minecraft.world.entity.ai.goal.ClimbOnTopOfPowderSnowGoal')
    mapClass('net.minecraft.world.entity.ai.goal.DolphinJumpGoal')
    mapClass('net.minecraft.world.entity.ai.goal.DoorInteractGoal')
    mapClass('net.minecraft.world.entity.ai.goal.EatBlockGoal')
    mapClass('net.minecraft.world.entity.ai.goal.FleeSunGoal')
    mapClass('net.minecraft.world.entity.ai.goal.FloatGoal') {
        constructor(Mob)
    }
    mapClass('net.minecraft.world.entity.ai.goal.FollowBoatGoal')
    mapClass('net.minecraft.world.entity.ai.goal.FollowFlockLeaderGoal')
    mapClass('net.minecraft.world.entity.ai.goal.FollowMobGoal')
    mapClass('net.minecraft.world.entity.ai.goal.FollowOwnerGoal')
    mapClass('net.minecraft.world.entity.ai.goal.FollowParentGoal')
    mapClass('net.minecraft.world.entity.ai.goal.GolemRandomStrollInVillageGoal')
    mapClass('net.minecraft.world.entity.ai.goal.InteractGoal')
    mapClass('net.minecraft.world.entity.ai.goal.JumpGoal')
    mapClass('net.minecraft.world.entity.ai.goal.LandOnOwnersShoulderGoal')
    mapClass('net.minecraft.world.entity.ai.goal.LeapAtTargetGoal')
    mapClass('net.minecraft.world.entity.ai.goal.LlamaFollowCaravanGoal')
    mapClass('net.minecraft.world.entity.ai.goal.LookAtPlayerGoal')
    mapClass('net.minecraft.world.entity.ai.goal.LookAtTradingPlayerGoal')
    mapClass('net.minecraft.world.entity.ai.goal.MeleeAttackGoal') {
        constructor(PathfinderMob, double, boolean)
    }
    mapClass('net.minecraft.world.entity.ai.goal.MoveBackToVillageGoal')
    mapClass('net.minecraft.world.entity.ai.goal.MoveThroughVillageGoal')
    mapClass('net.minecraft.world.entity.ai.goal.MoveToBlockGoal')
    mapClass('net.minecraft.world.entity.ai.goal.MoveTowardsRestrictionGoal')
    mapClass('net.minecraft.world.entity.ai.goal.MoveTowardsTargetGoal')
    mapClass('net.minecraft.world.entity.ai.goal.OcelotAttackGoal')
    mapClass('net.minecraft.world.entity.ai.goal.OfferFlowerGoal')
    mapClass('net.minecraft.world.entity.ai.goal.OpenDoorGoal')
    mapClass('net.minecraft.world.entity.ai.goal.PanicGoal')
    mapClass('net.minecraft.world.entity.ai.goal.PathfindToRaidGoal')
    mapClass('net.minecraft.world.entity.ai.goal.RandomLookAroundGoal') {
        constructor(Mob)
    }
    mapClass('net.minecraft.world.entity.ai.goal.RandomStandGoal')
    mapClass('net.minecraft.world.entity.ai.goal.RandomStrollGoal') {
        constructor(PathfinderMob, double)
    }
    mapClass('net.minecraft.world.entity.ai.goal.RandomSwimmingGoal')
    mapClass('net.minecraft.world.entity.ai.goal.RangedAttackGoal')
    mapClass('net.minecraft.world.entity.ai.goal.RangedBowAttackGoal')
    mapClass('net.minecraft.world.entity.ai.goal.RangedCrossbowAttackGoal')
    mapClass('net.minecraft.world.entity.ai.goal.RemoveBlockGoal')
    mapClass('net.minecraft.world.entity.ai.goal.RestrictSunGoal')
    mapClass('net.minecraft.world.entity.ai.goal.RunAroundLikeCrazyGoal')
    mapClass('net.minecraft.world.entity.ai.goal.SitWhenOrderedToGoal')
    mapClass('net.minecraft.world.entity.ai.goal.StrollThroughVillageGoal')
    mapClass('net.minecraft.world.entity.ai.goal.SwellGoal')
    mapClass('net.minecraft.world.entity.ai.goal.TemptGoal')
    mapClass('net.minecraft.world.entity.ai.goal.TradeWithPlayerGoal')
    mapClass('net.minecraft.world.entity.ai.goal.TryFindWaterGoal')
    mapClass('net.minecraft.world.entity.ai.goal.UseItemGoal')
    mapClass('net.minecraft.world.entity.ai.goal.WaterAvoidingRandomFlyingGoal')
    mapClass('net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal')
    mapClass('net.minecraft.world.entity.ai.goal.ZombieAttackGoal')

    // Target goals
    mapClass('net.minecraft.world.entity.ai.goal.target.TargetGoal')

    mapClass('net.minecraft.world.entity.ai.goal.target.DefendVillageTargetGoal')
    mapClass('net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal') {
        constructor(PathfinderMob, Class[]) // 1.14+
        constructor(PathfinderMob, boolean, Class[]) // <= 1.13.2
    }
    mapClass('net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal') {
        constructor(Mob, Class, boolean) // 1.14+
        constructor(PathfinderMob, Class, boolean) // <= 1.13.2
    }
    mapClass('net.minecraft.world.entity.ai.goal.target.NearestAttackableWitchTargetGoal')
    mapClass('net.minecraft.world.entity.ai.goal.target.NearestHealableRaiderTargetGoal')
    mapClass('net.minecraft.world.entity.ai.goal.target.NonTameRandomTargetGoal')
    mapClass('net.minecraft.world.entity.ai.goal.target.OwnerHurtByTargetGoal')
    mapClass('net.minecraft.world.entity.ai.goal.target.OwnerHurtTargetGoal')
    mapClass('net.minecraft.world.entity.ai.goal.target.ResetUniversalAngerTargetGoal')

    mapClass('net.minecraft.world.entity.decoration.ArmorStand') {
        field('net.minecraft.network.syncher.EntityDataAccessor', 'DATA_CLIENT_FLAGS')
        field('net.minecraft.network.syncher.EntityDataAccessor', 'DATA_HEAD_POSE')
        constructor(Level, double, double, double)
        setter(boolean, 'small')
        getter(boolean, 'small')
        getter(boolean, 'showArms')
        setter(boolean, 'setShowArms')
        setter(boolean, 'noBasePlate')
        getter(boolean, 'noBasePlate')
        setter(boolean, 'marker')
        getter(boolean, 'marker')
    }

    mapClass('net.minecraft.world.entity.player.Player') {
        method(void, 'attack', Entity)
        method(void, 'removeEntitiesOnShoulder')
    }

    mapClass('net.minecraft.server.level.ServerPlayer') {
        field('net.minecraft.server.network.ServerGamePacketListenerImpl', 'connection')
        field(int, 'latency')
        setter(Entity, 'camera')
        method(void, 'tellNeutralMobsThatIDied')
    }

    mapClass('net.minecraft.world.entity.projectile.FishingHook')

    mapClass('net.minecraft.world.entity.LightningBolt')

    var FriendlyByteBuf = mapClass('net.minecraft.network.FriendlyByteBuf') {
        constructor('io.netty.buffer.ByteBuf')
        method(it.name, 'writeNbt', 'net.minecraft.nbt.Tag') // 1.20.2+
        var frByteBuf = it.name
        methodChain {
            item(frByteBuf, 'writeNbt', 'net.minecraft.nbt.CompoundTag')
            item(void, 'func_150786_a', 'net.minecraft.nbt.CompoundTag')
        } // <= 1.20.1
    }

    var Packet = mapClass('net.minecraft.network.protocol.Packet')

    mapClass('net.minecraft.network.protocol.game.ClientboundAnimatePacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundBlockEventPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket')

    mapClass('net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket') { // <= 1.20.1
        constructor(String, FriendlyByteBuf) // pre-1.13
        constructor(ResourceLocation, FriendlyByteBuf) // 1.13+
    }

    mapClass('net.minecraft.network.protocol.game.ClientboundContainerClosePacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundPlayerAbilitiesPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket') {
        constructor(int[]) // 1.8.8 compat - bossbar
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundSetCameraPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundSetEntityLinkPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundTakeItemEntityPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket') {
        field(int, 'entityId')
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundSetEquipmentPacket') {
        field(int, 'entity')
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundRotateHeadPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundMoveEntityPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundMoveEntityPacket$Rot')
    mapClass('net.minecraft.network.protocol.game.ClientboundMoveEntityPacket$Pos')
    mapClass('net.minecraft.network.protocol.game.ClientboundMoveEntityPacket$PosRot')
    mapClass('net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket') {
        constructor(int, SynchedEntityData, boolean) // 1.8.8 compat - bossbar
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundEntityEventPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket') {
        constructor(Entity) // 1.8.8 compat - bossbar
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundSetEntityMotionPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundSetExperiencePacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundExplodePacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket')

    mapClass('net.minecraft.network.protocol.game.ClientboundDisconnectPacket')

    mapClass('net.minecraft.network.protocol.game.ClientboundAddPlayerPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundOpenBookPacket') {
        constructor()
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket') // < 1.19.2
    mapClass('net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket') // 1.19.3+
    mapClass('net.minecraft.network.protocol.game.ClientboundPlayerInfoRemovePacket') // 1.19.3+
    mapClass('net.minecraft.network.protocol.game.ClientboundTabListPacket') {
        constructor()
        constructor(Component, Component)
        field(Component, 'header')
        field(Component, 'footer')
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundRemoveMobEffectPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundSetDisplayObjectivePacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundSetObjectivePacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundSetScorePacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundResetScorePacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundAddMobPacket') {
        constructor(LivingEntity) // 1.8.8 compat - bossbar
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundAddEntityPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundForgetLevelChunkPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters')
    mapClass('net.minecraft.network.protocol.game.ClientboundHurtAnimationPacket')

    /* SPECTATOR start - Spigot implementation (no-legacy text) */
    // Titles <= 1.16.5
    var ClientboundSetTitlesPacket$Type = mapClass('net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type') {
        enumConstant('TITLE')
        enumConstant('SUBTITLE')
        enumConstant('ACTIONBAR')
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundSetTitlesPacket') {
        constructor(int, int, int)
        constructor(ClientboundSetTitlesPacket$Type, Component)
    }
    // Titles >= 1.17
    mapClass('net.minecraft.network.protocol.game.ClientboundSetTitleTextPacket') {
        constructor(Component)
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundSetSubtitleTextPacket') {
        constructor(Component)
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundSetTitlesAnimationPacket') {
        constructor(int, int, int)
    }
    /* SPECTATOR end */

    mapClass('net.minecraft.network.syncher.EntityDataSerializers')
    mapClass('net.minecraft.network.syncher.EntityDataAccessor') {
        getter(int, 'id')
    }

    mapClass('net.minecraft.world.level.GameType')

    var ServerboundInteractPacket$Action = mapClass('net.minecraft.network.protocol.game.ServerboundInteractPacket$Action') {
        enumConstant('ATTACK')
    }

    mapClass('net.minecraft.network.protocol.game.ServerboundInteractPacket') {
        field(int, 'entityId')
        field(ServerboundInteractPacket$Action, 'action')
        field(ServerboundInteractPacket$Action, 'ATTACK_ACTION')
    }

    mapClass('net.minecraft.network.syncher.EntityDataSerializers')

    var Item = mapClass('net.minecraft.world.item.Item') {
        method(int, 'getId', it.name)
    }

    // new way of getting protocol
    mapClass('net.minecraft.SharedConstants') {
        getter(int, 'protocolVersion')
    }

    var ServerStatus$Version = mapClass('net.minecraft.network.protocol.status.ServerStatus$Version') {
        getterChain(int, 'protocol') // 1.19.4 - compatible change: ServerStatus$Version is now record, so the method got renamed
    }

    // old way of getting protocol
    var ServerStatus = mapClass('net.minecraft.network.protocol.status.ServerStatus') {
        getter(ServerStatus$Version, 'version') // -1.19.3
        method(Optional, 'version') // 1.19.4+ - incompatible change: the method now returns Optional instead of nullable object
    }

    var ServerConnectionListener = mapClass('net.minecraft.server.network.ServerConnectionListener') {
        field(List, 'channels')
        field(List, 'connections')
    }

    mapClass('net.minecraft.server.MinecraftServer') {
        field(ServerStatus, 'status')
        field(ServerConnectionListener, 'connection')
    }

    var BlockState = mapClass('net.minecraft.world.level.block.state.BlockState')

    mapClass('net.minecraft.world.level.block.Block') {
        method(int, 'getId', BlockState)
        method(BlockState, 'fromLegacyData', int)
    }

    mapClass('net.minecraft.network.protocol.PacketFlow') {
        enumConstant('SERVERBOUND')
        enumConstant('CLIENTBOUND')
    }

    mapClass('net.minecraft.network.ConnectionProtocol') {
        enumConstant('HANDSHAKING')
        enumConstant('PLAY')
        enumConstant('STATUS')
        enumConstant('LOGIN')
        field(Map, 'flows') // new
        field(Map, 'mojang:packets:1.14.4') // old
    }

    var ConnectionProtocol$PacketSet = mapClass('net.minecraft.network.ConnectionProtocol$PacketSet') {
        methodChain {
            item(Integer, 'getId', Class)
            item(int, 'getId', Class)
        } // 1.19.4: compatible change - return type changed from boxed Integer to primitive int
    }

    mapClass('net.minecraft.network.ConnectionProtocol$CodecData') { // 1.20.2+
        field(ConnectionProtocol$PacketSet, 'packetSet')
    }

    var Connection = mapClass('net.minecraft.network.Connection') {
        field('io.netty.channel.Channel', 'channel')
    }

    mapClass('net.minecraft.server.network.ServerGamePacketListenerImpl') {
        field(Connection, 'connection') // <= 1.20.1
        method(void, 'send', Packet) // <= 1.20.1
    }

    mapClass('net.minecraft.server.network.ServerCommonPacketListenerImpl') {
        field(Connection, 'connection') // 1.20.2+
        method(void, 'send', Packet) // 1.20.2+
    }

    mapClass('net.minecraft.core.Direction') {
        method(it.name, 'fromYRot', double)
    }

    var Tag = mapClass('net.minecraft.nbt.Tag') {
        method(String, 'getAsString')
    }

    mapClass('net.minecraft.nbt.ByteArrayTag') {
        constructor(byte[])
        method(byte[], 'getAsByteArray')
    }

    mapClass('net.minecraft.nbt.ByteTag') {
        constructor(byte)
        method(byte, 'getAsByte')
        method(it.name, 'valueOf', byte)
    }

    var CompoundTag = mapClass('net.minecraft.nbt.CompoundTag') {
        constructor()
        method(Set, 'getAllKeys')
        method(Tag, 'get', String)
        method(void, 'remove', String)

        var cmpTagName = it.name
        methodChain {
            item(cmpTagName, 'put', String, Tag)
            item(void, 'func_74782_a', String, Tag)
        }
        methodChain {
            item(cmpTagName, 'merge', String, Tag)
            item(void, 'func_179237_a', cmpTagName)
        } // 1.13 method returns `this` for chaining
    }

    mapClass('net.minecraft.nbt.DoubleTag') {
        constructor(double)
        method(double, 'getAsDouble')
        method(it.name, 'valueOf', double) // 1.15+
    }

    mapClass('net.minecraft.nbt.FloatTag') {
        constructor(float)
        method(float, 'getAsFloat')
        method(it.name, 'valueOf', float) // 1.15+
    }

    mapClass('net.minecraft.nbt.IntArrayTag') {
        constructor(int[])
        method(int[], 'getAsIntArray')
    }

    mapClass('net.minecraft.nbt.IntTag') {
        constructor(int)
        method(int, 'getAsInt')
        method(it.name, 'valueOf', int) // 1.15+
    }

    mapClass('net.minecraft.nbt.ListTag') {
        constructor()
        method(int, 'size')
        methodChain {
            item(Tag, 'get', int)
            item(Tag, 'func_179238_g', int)
        }
        var ltTagName = it.name
        methodChain {
            item(ltTagName, 'add', Tag)
            item(void, 'add', Tag)
        } // <= 1.13.2
    }

    mapClass('net.minecraft.nbt.LongArrayTag') { // 1.12+
        constructor(long[])
        method(long[], 'getAsLongArray') // 1.13+
        field(long[], 'field_193587_b') // 1.12.x
    }

    mapClass('net.minecraft.nbt.LongTag') {
        constructor(long)
        method(long, 'getAsLong')
        method(it.name, 'valueOf', long) // 1.15+
    }

    mapClass('net.minecraft.nbt.ShortTag') {
        constructor(short)
        method(short, 'getAsShort')
        method(it.name, 'valueOf', short) // 1.15+
    }

    mapClass('net.minecraft.nbt.StringTag') {
        constructor(String)
        method(it.name, 'valueOf', String) // 1.15+
    }


    mapClass('net.minecraft.world.item.ItemStack') {
        method(it.name, 'copy')
        method(void, 'save', CompoundTag)
        method(CompoundTag, 'getTag')
        method(void, 'setTag', CompoundTag)
    }

    // 1.10.x compat
    var EnumZombieType = mapClass('net.minecraft.server.VVV.EnumZombieType') {
        enumConstant('HUSK')
    }

    mapClass('net.minecraft.world.entity.monster.Zombie') {
        setter(EnumZombieType, 'villagerType')
        getter(EnumZombieType, 'villagerType')
        field(Attribute, 'SPAWN_REINFORCEMENTS_CHANCE')
    }

    /* 1.8.8 compat start */
    // Particles
    var EnumParticle = mapClass('net.minecraft.server.VVV.EnumParticle') {
        method(it.name, 'func_179342_a', int)
    }

    mapClass('net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket') {
        constructor(EnumParticle, boolean, float, float, float, float, float, float, float, int, int[])
    }

    mapClass('net.minecraft.server.level.ServerLevel') {
        method(void, 'func_180505_a', EnumParticle, boolean, double, double, double, int, double, double, double, double, int[])
    }

    // Attributes
    mapClass('net.minecraft.world.entity.monster.SharedMonsterAttributes') {
        enumConstant('MAX_HEALTH')
        enumConstant('FOLLOW_RANGE')
        enumConstant('KNOCKBACK_RESISTANCE')
        enumConstant('MOVEMENT_SPEED')
        enumConstant('FLYING_SPEED')
        enumConstant('ATTACK_DAMAGE')
        enumConstant('ATTACK_SPEED')
        enumConstant('ARMOR')
        enumConstant('ARMOR_TOUGHNESS')
        enumConstant('LUCK')
    }

    mapClass('net.minecraft.world.entity.animal.horse.Horse') {
        enumConstant('attributeJumpStrength')
    }

    var AttributeModifier = mapClass('net.minecraft.world.entity.ai.attributes.AttributeModifier') {
        getter(double, 'amount') // amount
        method(int, 'func_111169_c') // operation (ordered: 0,1,2)
        getter(String, 'name') // name
        getter(UUID, 'id') // unique id

        constructor(UUID, String, double, int)
    }

    mapClass('net.minecraft.world.entity.ai.attributes.AttributeInstance') {
        constructor(Attribute, Consumer)
        setter(double, 'baseValue') // set base value

        getter(Attribute, 'attribute') // attribute type
        getter(double, 'baseValue') // get base value
        getter(List, 'modifiers') // get modifiers
        method(void, 'addModifier', AttributeModifier) // add modifier
        method(void, 'removeModifier', AttributeModifier) // remove modifier
        getter(double, 'value') // get value
    }

    var AttributeSupplier = mapClass('net.minecraft.world.entity.ai.attributes.AttributeSupplier') {
        field(Attribute, 'instances')
    }

    mapClass('net.minecraft.world.entity.ai.attributes.AttributeMap') {
        method(void, 'registerAttribute', Attribute) // old
        // new
        field(AttributeSupplier, 'supplier')
    }


    // BossBars

    mapClass('net.minecraft.world.entity.boss.wither.WitherBoss') {
        constructor(Level)
    }

    mapClass('net.minecraft.world.entity.boss.enderdragon.EnderDragon') {
        constructor(Level)
        field(List, 'subEntities')
    }

    mapClass('net.minecraft.network.protocol.game.ClientboundChatPacket') {
        constructor(Component, byte)
    }

    mapClass('net.minecraft.world.level.block.entity.BlockEntity') {
        method(void, 'setChanged')
    }

    mapClass('net.minecraft.server.VVV.TileEntityFlowerPot') {
        method(void, 'func_145964_a', Item, int)
        getter(Item, 'item')
        getter(byte, 'data')
    }

    /* 1.8.8 compat end */

    mapClass('net.minecraft.world.entity.item.PrimedTnt') {
        field(LivingEntity, 'owner')
    }

    mapClass('net.minecraft.world.entity.EntityType$EntityFactory') {
        method(Object, 'create', EntityType, Level)
    }
}
