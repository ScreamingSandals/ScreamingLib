import java.util.concurrent.atomic.AtomicInteger
import java.util.function.Consumer
import java.util.function.Supplier

plugins {
    alias libs.plugins.takenaka
}

enableShadowPlugin()

sourceSets.main.java.srcDirs += 'src/generated/java'

dependencies {
//    mappingBundle libs.takenaka.mappings
    implementation libs.takenaka.runtime
}

shadowJar {
    relocate 'me.kcra.takenaka.accessor', 'org.screamingsandals.lib.impl.ext.takenaka'
}

// after any changes in this file, please run the generateAccessors task to see changes in your ide

accessors {

    /*
    * TODO:
    *  1. Update Slib code
    *  2. Start using bundle when updated
    *
    */

    // uncomment this and remove the mappingBundle dependency,
    // if you want to develop against custom versions
    versionRange('1.8.8', '1.20.4') {
        // exclude 1.16 and 1.10.1, they don't have most mappings and are basically not used at all
        // exclude 1.8.9, client-only update - no Spigot mappings, no thank you
        // exclude 1.9.1 and 1.9.3 - no mappings at all
        exclude '1.16', '1.10.1', '1.8.9', '1.9.1', '1.9.3'

        // include only releases, no snapshots
        includeTypes 'release'
    }

    basePackage 'org.screamingsandals.lib.impl.nms.accessors'
    accessedNamespaces 'spigot'
    accessorType 'reflection'

    var ResourceLocation = mapClass('net.minecraft.resources.ResourceLocation') {
        constructor(String)
    }

    var Component = mapClass('net.minecraft.network.chat.Component') {
        getter(String, 'coloredString') //method String, 'func_150254_d' // get legacy string
    }

    var EntityType = mapClass('net.minecraft.world.entity.EntityType') {
        method(java.util.Optional, 'byString', String) // 1.14+
        method('net.minecraft.entity.EntityType', 'func_200713_a', String) // 1.13.X, Searge mapped
        field('net.minecraft.util.registry.RegistryNamespaced', 'field_191308_b') // 1.11 - 1.12.2 - map from resource location to class type, Searge mapped
        field(Map, 'field_75624_e') // <= 1.10.2, Searge mapped

        field(Map, 'field_75625_b') // <= 1.10.2 - map from string to class type, Searge mapped
        method(Class, 'func_201760_c') // 1.13.X - entity class type, Searge mapped
        field('net.minecraft.world.entity.EntityType$EntityFactory', 'factory') // 1.14+ - factory method
    }

    mapClass('net.minecraft.core.IRegistry') { // TODO: should be net.minecraft.core.Registry, currently Spigot mapped
        field('net.minecraft.core.DefaultedRegistry', 'ENTITY_TYPE') // <= 1.19.2
        method(int, 'getId', Object)
    }

    mapClass('net.minecraft.core.registries.BuiltInRegistries') {
        field('net.minecraft.core.DefaultedRegistry', 'ENTITY_TYPE')
    }

    mapClass('net.minecraft.core.MappedRegistry') {
        method(int, 'getId', Object)
        method(Object, 'get', ResourceLocation) // 1.13.1+
        method(Object, 'get', Object) // <= 1.13
    }

    var SynchedEntityData = mapClass('net.minecraft.network.syncher.SynchedEntityData') {
        method(void, 'watch', int, Object) // 1.8.8 compat - bossbar - 1.8.8 ONLY method
    }

    var Level = mapClass('net.minecraft.world.level.Level') {
        getter(Supplier, 'profilerSupplier') // 1.17 and newer
        getter('net.minecraft.util.profiling.ProfilerFiller', 'profiler') // for something between new and old versions
        field('net.minecraft.server.VVV.MethodProfiler', 'methodProfiler') // for older versions, Spigot mapped
    }

    var Entity = mapClass('net.minecraft.world.entity.Entity') {
        getter(SynchedEntityData, 'entityData') // DataWatcher
        getter(Level, 'commandSenderWorld') // world
        getter(double, 'x')
        getter(double, 'y')
        getter(double, 'z')
        getter(float, 'yRot')
        getter(float, 'xRot')
        getter(EntityType, 'type')
        getter(int, 'id')
        setter(boolean, 'noGravity')
        getter(boolean, 'noGravity')
        setter(boolean, 'onGround')
        method(boolean, 'onGround')
        getter(UUID, 'UUID')
        setter(boolean, 'customNameVisible')
        getter(boolean, 'customNameVisible')
        setter(boolean, 'invisible')
        getter(boolean, 'invisible')
        getter('net.minecraft.world.phys.Vec3', 'deltaMovement')
        setter(String, 'customName')
        setter(Component, 'customName')
        method(void, 'absMoveTo', double, double, double, float, float)
        getter(Component, 'customName')
        method(boolean, 'startRiding', it.name, boolean)
        method(void, 'stopRiding')
        field(double, 'motX') // velocity x
        field(double, 'motY') // velocity y
        field(double, 'motZ') // velocity z
        field(int, 'entityCount')
        field(boolean, 'onGround')
        field(int, 'id')
        field(AtomicInteger, 'ENTITY_COUNTER')
        field(float, 'yRot') // yaw
        field(float, 'xRot') // pitch
        field(double, 'x') // locX
        field(double, 'y') // locY
        field(double, 'z') // locZ
        field(Level, 'level') // world
    }

    var InteractionHand = mapClass('net.minecraft.world.InteractionHand') {
        enumConstant('MAIN_HAND')
        enumConstant('OFF_HAND')
    }

    // 1.8.8 compat - Attributes (LivingEntity requires to be defined earlier)
    var Attribute = mapClass('net.minecraft.world.entity.ai.attributes.Attribute') {
        getter(double, 'defaultValue')
    }

    var CombatTracker = mapClass('net.minecraft.world.damagesource.CombatTracker') {
        getter(Component, 'deathMessage')
        method(void, 'recheckStatus')
    }

    var LivingEntity = mapClass('net.minecraft.world.entity.LivingEntity') { // 1.8.8 compat - BossBar
        method('net.minecraft.world.entity.ai.attributes.AttributeInstance', 'getAttribute', Attribute) // 1.8.8 compat - Attributes
        field(int, 'removeArrowTime')
        getter(int, 'arrowCount')
        setter(int, 'arrowCount')
        method(boolean, 'doHurtTarget', Entity)
        method(void, 'swing', InteractionHand)
        getter(float, 'absorptionAmount')
        setter(float, 'absorptionAmount')
        getter('net.minecraft.world.entity.ai.attributes.AttributeMap', 'attributes')
        getter(CombatTracker, 'combatTracker')
    }

    var Mob = mapClass('net.minecraft.world.entity.Mob') {
        setter(boolean, 'noAi') // 1.8.8
        getter(boolean, 'noAi') // 1.8.8
        setter(LivingEntity, 'target')
        getter(LivingEntity, 'target')

        field('net.minecraft.world.entity.ai.goal.GoalSelector', 'goalSelector')
        field('net.minecraft.world.entity.ai.goal.GoalSelector', 'targetSelector')
    }

    var PathfinderMob = mapClass('net.minecraft.world.entity.PathfinderMob')
    // end 1.8.8 compat


    mapClass('net.minecraft.network.chat.Component$Serializer') {
        // We do not really care whether it's MutableComponent or not, it implements Component anyways and we do not use anything extra from MutableComponent class
        methodChain {
            it.item('net.minecraft.network.chat.MutableComponent', 'fromJson', String) // 1.16.1+
            it.item(Component, 'fromJson', String) // up to 1.15.2
        }
    }

    var Rotations = mapClass('net.minecraft.core.Rotations') {
        constructor(float, float, float)
        getter(float, 'x')
        getter(float, 'y')
        getter(float, 'z')
    }

    var Goal = mapClass('net.minecraft.world.entity.ai.goal.Goal') {
        method(boolean, 'canUse')
        method(boolean, 'canContinueToUse')
        method(void, 'start')
        method(void, 'stop')
        method(void, 'tick')

        getter(EnumSet, 'flags') // >= 1.14
    }

    var Goal$Flag = mapClass('net.minecraft.world.entity.ai.goal.Goal$Flag') {
        enumConstant('TARGET')
    }

    var GoalSelector = mapClass('net.minecraft.world.entity.ai.goal.GoalSelector') {
        constructor(Supplier)

        field(Set, 'availableGoals') // 1.14+
        fieldChain {
            it.item(List, 'field_75782_a')
            it.item(Set, 'field_75782_a') // 1.8.8
        }

        method(void, 'addGoal', int, Goal)
        method(void, 'removeGoal', Goal)
    }

    mapClass('net.minecraft.world.entity.ai.goal.WrappedGoal') { // 1.14+
        getter(Goal, 'goal')
    }

    mapClass('net.minecraft.server.VVV.PathfinderGoalSelector$PathfinderGoalSelectorItem') { // 1.8.8-1.13.2, Spigot mapped
        field('net.minecraft.entity.ai.EntityAIBase', 'field_75733_a') // Searge mapped
    }

    // Goals
    mapClass('net.minecraft.world.entity.ai.goal.AvoidEntityGoal')
    mapClass('net.minecraft.world.entity.ai.goal.BegGoal')
    mapClass('net.minecraft.world.entity.ai.goal.BreakDoorGoal')
    mapClass('net.minecraft.world.entity.ai.goal.BreathAirGoal')
    mapClass('net.minecraft.world.entity.ai.goal.BreedGoal')
    mapClass('net.minecraft.world.entity.ai.goal.CatLieOnBedGoal')
    mapClass('net.minecraft.world.entity.ai.goal.CatSitOnBlockGoal')
    mapClass('net.minecraft.world.entity.ai.goal.ClimbOnTopOfPowderSnowGoal')
    mapClass('net.minecraft.world.entity.ai.goal.DolphinJumpGoal')
    mapClass('net.minecraft.world.entity.ai.goal.DoorInteractGoal')
    mapClass('net.minecraft.world.entity.ai.goal.EatBlockGoal')
    mapClass('net.minecraft.world.entity.ai.goal.FleeSunGoal')
    mapClass('net.minecraft.world.entity.ai.goal.FloatGoal') {
        constructor(Mob)
    }
    mapClass('net.minecraft.world.entity.ai.goal.FollowBoatGoal')
    mapClass('net.minecraft.world.entity.ai.goal.FollowFlockLeaderGoal')
    mapClass('net.minecraft.world.entity.ai.goal.FollowMobGoal')
    mapClass('net.minecraft.world.entity.ai.goal.FollowOwnerGoal')
    mapClass('net.minecraft.world.entity.ai.goal.FollowParentGoal')
    mapClass('net.minecraft.world.entity.ai.goal.GolemRandomStrollInVillageGoal')
    mapClass('net.minecraft.world.entity.ai.goal.InteractGoal')
    mapClass('net.minecraft.world.entity.ai.goal.JumpGoal')
    mapClass('net.minecraft.world.entity.ai.goal.LandOnOwnersShoulderGoal')
    mapClass('net.minecraft.world.entity.ai.goal.LeapAtTargetGoal')
    mapClass('net.minecraft.world.entity.ai.goal.LlamaFollowCaravanGoal')
    mapClass('net.minecraft.world.entity.ai.goal.LookAtPlayerGoal')
    mapClass('net.minecraft.world.entity.ai.goal.LookAtTradingPlayerGoal')
    mapClass('net.minecraft.world.entity.ai.goal.MeleeAttackGoal') {
        constructor(PathfinderMob, double, boolean)
    }
    mapClass('net.minecraft.world.entity.ai.goal.MoveBackToVillageGoal')
    mapClass('net.minecraft.world.entity.ai.goal.MoveThroughVillageGoal')
    mapClass('net.minecraft.world.entity.ai.goal.MoveToBlockGoal')
    mapClass('net.minecraft.world.entity.ai.goal.MoveTowardsRestrictionGoal')
    mapClass('net.minecraft.world.entity.ai.goal.MoveTowardsTargetGoal')
    mapClass('net.minecraft.world.entity.ai.goal.OcelotAttackGoal')
    mapClass('net.minecraft.world.entity.ai.goal.OfferFlowerGoal')
    mapClass('net.minecraft.world.entity.ai.goal.OpenDoorGoal')
    mapClass('net.minecraft.world.entity.ai.goal.PanicGoal')
    mapClass('net.minecraft.world.entity.ai.goal.PathfindToRaidGoal')
    mapClass('net.minecraft.world.entity.ai.goal.RandomLookAroundGoal') {
        constructor(Mob)
    }
    mapClass('net.minecraft.world.entity.ai.goal.RandomStandGoal')
    mapClass('net.minecraft.world.entity.ai.goal.RandomStrollGoal') {
        constructor(PathfinderMob, double)
    }
    mapClass('net.minecraft.world.entity.ai.goal.RandomSwimmingGoal')
    mapClass('net.minecraft.world.entity.ai.goal.RangedAttackGoal')
    mapClass('net.minecraft.world.entity.ai.goal.RangedBowAttackGoal')
    mapClass('net.minecraft.world.entity.ai.goal.RangedCrossbowAttackGoal')
    mapClass('net.minecraft.world.entity.ai.goal.RemoveBlockGoal')
    mapClass('net.minecraft.world.entity.ai.goal.RestrictSunGoal')
    mapClass('net.minecraft.world.entity.ai.goal.RunAroundLikeCrazyGoal')
    mapClass('net.minecraft.world.entity.ai.goal.SitWhenOrderedToGoal')
    mapClass('net.minecraft.world.entity.ai.goal.StrollThroughVillageGoal')
    mapClass('net.minecraft.world.entity.ai.goal.SwellGoal')
    mapClass('net.minecraft.world.entity.ai.goal.TemptGoal')
    mapClass('net.minecraft.world.entity.ai.goal.TradeWithPlayerGoal')
    mapClass('net.minecraft.world.entity.ai.goal.TryFindWaterGoal')
    mapClass('net.minecraft.world.entity.ai.goal.UseItemGoal')
    mapClass('net.minecraft.world.entity.ai.goal.WaterAvoidingRandomFlyingGoal')
    mapClass('net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal')
    mapClass('net.minecraft.world.entity.ai.goal.ZombieAttackGoal')

    // Target goals
    mapClass('net.minecraft.world.entity.ai.goal.target.TargetGoal')

    mapClass('net.minecraft.world.entity.ai.goal.target.DefendVillageTargetGoal')
    mapClass('net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal') {
        constructor(PathfinderMob, Class[]) // 1.14+
        constructor('net.minecraft.server.VVV.EntityCreature', boolean, Class[]) // <= 1.13.2, Spigot mapped
    }
    mapClass('net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal') {
        constructor(Mob, Class, boolean) // 1.14+
        constructor('net.minecraft.server.VVV.EntityCreature', Class, boolean) // <= 1.13.2, Spigot mapped
    }
    mapClass('net.minecraft.world.entity.ai.goal.target.NearestAttackableWitchTargetGoal')
    mapClass('net.minecraft.world.entity.ai.goal.target.NearestHealableRaiderTargetGoal')
    mapClass('net.minecraft.world.entity.ai.goal.target.NonTameRandomTargetGoal')
    mapClass('net.minecraft.world.entity.ai.goal.target.OwnerHurtByTargetGoal')
    mapClass('net.minecraft.world.entity.ai.goal.target.OwnerHurtTargetGoal')
    mapClass('net.minecraft.world.entity.ai.goal.target.ResetUniversalAngerTargetGoal')

    mapClass('net.minecraft.world.entity.decoration.ArmorStand') {
        field('net.minecraft.network.syncher.EntityDataAccessor', 'DATA_CLIENT_FLAGS')
        field('net.minecraft.network.syncher.EntityDataAccessor', 'DATA_HEAD_POSE')
        constructor(Level, double, double, double)
        setter(boolean, 'small')
        getter(boolean, 'small')
        getter(boolean, 'showArms')
        setter(boolean, 'showArms')
        setter(boolean, 'noBasePlate')
        getter(boolean, 'noBasePlate')
        setter(boolean, 'marker')
        getter(boolean, 'marker')
    }

    mapClass('net.minecraft.world.entity.player.Player') {
        method(void, 'attack', Entity)
        method(void, 'removeEntitiesOnShoulder')
    }

    mapClass('net.minecraft.server.level.ServerPlayer') {
        field('net.minecraft.server.network.ServerGamePacketListenerImpl', 'connection')
        field(int, 'latency')
        setter(Entity, 'camera')
        method(void, 'tellNeutralMobsThatIDied')
    }

    mapClass('net.minecraft.world.entity.projectile.FishingHook')

    mapClass('net.minecraft.world.entity.LightningBolt')

    var FriendlyByteBuf = mapClass('net.minecraft.network.FriendlyByteBuf') {
        constructor('io.netty.buffer.ByteBuf')
        var frByteBuf = it.name
        methodChain {
            it.item(frByteBuf, 'writeNbt', 'net.minecraft.nbt.Tag') // 1.20.2+, it's just more lenient, we use it with CompoundTag anyways
            it.item(frByteBuf, 'writeNbt', 'net.minecraft.nbt.CompoundTag') // <= 1.20.1
            it.item(void, 'func_150786_a', 'net.minecraft.nbt.NBTTagCompound') // 1.8.8, Searge mapped
        }
    }

    var Packet = mapClass('net.minecraft.network.protocol.Packet')

    mapClass('net.minecraft.network.protocol.game.ClientboundAnimatePacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundBlockEventPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket')

    mapClass('net.minecraft.network.protocol.common.ClientboundCustomPayloadPacket') { // <= 1.20.1 known as game.ClientboundCustomPayloadPacket; 1.20.2+ new name
        constructor(String, 'net.minecraft.server.VVV.PacketDataSerializer') // pre-1.13, Spigot mapped
        constructor(ResourceLocation, FriendlyByteBuf) // 1.13+
    }

    mapClass('net.minecraft.network.protocol.game.ClientboundContainerClosePacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundPlayerAbilitiesPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket') {
        constructor(int[]) // 1.8.8 compat - bossbar
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundSetCameraPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundSetEntityLinkPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundTakeItemEntityPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket') {
        field(int, 'entityId')
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundSetEquipmentPacket') {
        field(int, 'entity')
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundRotateHeadPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundMoveEntityPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundMoveEntityPacket$Rot')
    mapClass('net.minecraft.network.protocol.game.ClientboundMoveEntityPacket$Pos')
    mapClass('net.minecraft.network.protocol.game.ClientboundMoveEntityPacket$PosRot')
    mapClass('net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket') {
        constructor(int, SynchedEntityData, boolean) // 1.8.8 compat - bossbar
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundEntityEventPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket') {
        constructor(Entity) // 1.8.8 compat - bossbar
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundSetEntityMotionPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundSetExperiencePacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundExplodePacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket')

    mapClass('net.minecraft.network.protocol.common.ClientboundDisconnectPacket')

    mapClass('net.minecraft.network.protocol.game.ClientboundAddPlayerPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundOpenBookPacket') {
        constructor()
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket') // < 1.19.2 known as ClientboundPlayerInfoPacket; 1.19.3+ new name
    mapClass('net.minecraft.network.protocol.game.ClientboundPlayerInfoRemovePacket') // 1.19.3+
    mapClass('net.minecraft.network.protocol.game.ClientboundTabListPacket') {
        constructor()
        constructor(Component, Component)
        field(Component, 'header')
        field(Component, 'footer')
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundRemoveMobEffectPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundSetDisplayObjectivePacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundSetObjectivePacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundSetScorePacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundResetScorePacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundAddMobPacket') {
        constructor(LivingEntity) // 1.8.8 compat - bossbar
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundAddEntityPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundForgetLevelChunkPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket')
    mapClass('net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters')
    mapClass('net.minecraft.network.protocol.game.ClientboundHurtAnimationPacket')

    /* SPECTATOR start - Spigot implementation (no-legacy text) */
    // Titles <= 1.16.5
    var ClientboundSetTitlesPacket$Type = mapClass('net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type') {
        enumConstant('TITLE')
        enumConstant('SUBTITLE')
        enumConstant('ACTIONBAR')
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundSetTitlesPacket') {
        constructor(int, int, int)
        constructor(ClientboundSetTitlesPacket$Type, Component)
    }
    // Titles >= 1.17
    mapClass('net.minecraft.network.protocol.game.ClientboundSetTitleTextPacket') {
        constructor(Component)
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundSetSubtitleTextPacket') {
        constructor(Component)
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundSetTitlesAnimationPacket') {
        constructor(int, int, int)
    }
    /* SPECTATOR end */

    mapClass('net.minecraft.network.syncher.EntityDataSerializers')
    mapClass('net.minecraft.network.syncher.EntityDataAccessor') {
        getter(int, 'id')
    }

    mapClass('net.minecraft.world.level.GameType')

    var ServerboundInteractPacket$Action = mapClass('net.minecraft.network.protocol.game.ServerboundInteractPacket$Action') {
        enumConstant('ATTACK')
    }

    mapClass('net.minecraft.network.protocol.game.ServerboundInteractPacket') {
        field(int, 'entityId')
        field(ServerboundInteractPacket$Action, 'action')
        field(ServerboundInteractPacket$Action, 'ATTACK_ACTION')
    }

    mapClass('net.minecraft.world.item.Item') {
        method(int, 'getId', it.name)
    }

    // new way of getting protocol
    mapClass('net.minecraft.SharedConstants') {
        getter(int, 'protocolVersion')
    }

    var ServerStatus$Version = mapClass('net.minecraft.network.protocol.status.ServerStatus$Version') {
        getterChain(int, 'protocol') // 1.19.4 - compatible change: ServerStatus$Version is now record, so the method got renamed
    }

    // old way of getting protocol
    var ServerStatus = mapClass('net.minecraft.network.protocol.status.ServerStatus') {
        getter(ServerStatus$Version, 'version') // -1.19.3
        method(java.util.Optional, 'version') // 1.19.4+ - incompatible change: the method now returns Optional instead of nullable object
    }

    var ServerConnectionListener = mapClass('net.minecraft.server.network.ServerConnectionListener') {
        field(List, 'channels')
        field(List, 'connections')
    }

    mapClass('net.minecraft.server.MinecraftServer') {
        field(ServerStatus, 'status')
        field(ServerConnectionListener, 'connection')
    }

    var BlockState = mapClass('net.minecraft.world.level.block.state.BlockState')

    mapClass('net.minecraft.world.level.block.Block') {
        method(int, 'getId', BlockState)
        method('net.minecraft.server.VVV.IBlockData', 'fromLegacyData', int) // Spigot mapped
    }

    mapClass('net.minecraft.network.protocol.PacketFlow') {
        enumConstant('SERVERBOUND')
        enumConstant('CLIENTBOUND')
    }

    mapClass('net.minecraft.network.ConnectionProtocol') {
        enumConstant('HANDSHAKING')
        enumConstant('PLAY')
        enumConstant('STATUS')
        enumConstant('LOGIN')
        field(Map, 'flows') // new
        field(Map, 'packets') // old
    }

    var ConnectionProtocol$PacketSet = mapClass('net.minecraft.network.ConnectionProtocol$PacketSet') {
        methodChain {
            it.item(int, 'getId', Class)
            it.item(Integer, 'getId', Class)
        } // 1.19.4: compatible change - return type changed from boxed Integer to primitive int
    }

    mapClass('net.minecraft.network.ConnectionProtocol$CodecData') { // 1.20.2+
        field(ConnectionProtocol$PacketSet, 'packetSet')
    }

    var Connection = mapClass('net.minecraft.network.Connection') {
        field('io.netty.channel.Channel', 'channel')
    }

    mapClass('net.minecraft.server.network.ServerGamePacketListenerImpl') {
        field(Connection, 'connection') // <= 1.20.1
        method(void, 'send', Packet) // <= 1.20.1
    }

    mapClass('net.minecraft.server.network.ServerCommonPacketListenerImpl') {
        field(Connection, 'connection') // 1.20.2+
        method(void, 'send', Packet) // 1.20.2+
    }

    mapClass('net.minecraft.core.Direction') {
        method(it.name, 'fromYRot', double)
    }

    var Tag = mapClass('net.minecraft.nbt.Tag') {
        method(String, 'getAsString')
    }

    mapClass('net.minecraft.nbt.ByteArrayTag') {
        constructor(byte[])
        method(byte[], 'getAsByteArray')
    }

    mapClass('net.minecraft.nbt.ByteTag') {
        constructor(byte)
        method(byte, 'getAsByte')
        method(it.name, 'valueOf', byte)
    }

    var CompoundTag = mapClass('net.minecraft.nbt.CompoundTag') {
        constructor()
        method(Set, 'getAllKeys')
        method(Tag, 'get', String)
        method(void, 'remove', String)

        var cmpTagName = it.name
        methodChain {
            it.item(Tag, 'put', String, Tag)
            it.item(void, 'set', String, 'net.minecraft.server.VVV.NBTBase') // Spigot mapped
        }
        methodChain {
            it.item(cmpTagName, 'merge', cmpTagName)
            it.item(void, 'func_179237_a', 'net.minecraft.nbt.NBTTagCompound') // Searge mapped
        } // 1.13 method returns `this` for chaining
    }

    mapClass('net.minecraft.nbt.DoubleTag') {
        constructor(double)
        method(double, 'getAsDouble')
        method(it.name, 'valueOf', double) // 1.15+
    }

    mapClass('net.minecraft.nbt.FloatTag') {
        constructor(float)
        method(float, 'getAsFloat')
        method(it.name, 'valueOf', float) // 1.15+
    }

    mapClass('net.minecraft.nbt.IntArrayTag') {
        constructor(int[])
        method(int[], 'getAsIntArray')
    }

    mapClass('net.minecraft.nbt.IntTag') {
        constructor(int)
        method(int, 'getAsInt')
        method(it.name, 'valueOf', int) // 1.15+
    }

    mapClass('net.minecraft.nbt.ListTag') {
        constructor()
        method(int, 'size')
        methodChain {
            it.item(Tag, 'get', int)
            it.item('net.minecraft.nbt.NBTBase', 'func_179238_g', int) // Searge mapped
        }
        methodChain {
            it.item(boolean, 'add', 'net.minecraft.server.VVV.NBTBase') // Spigot mapped
            it.item(void, 'add', 'net.minecraft.server.VVV.NBTBase') // Spigot mapped
        } // <= 1.13.2
    }

    mapClass('net.minecraft.nbt.LongArrayTag') { // 1.12+
        constructor(long[])
        method(long[], 'getAsLongArray') // 1.13+
        fieldInferred('field_193587_b', '1.12.2') // 1.12.x // TODO: can't be requested without inferred
    }

    mapClass('net.minecraft.nbt.LongTag') {
        constructor(long)
        method(long, 'getAsLong')
        method(it.name, 'valueOf', long) // 1.15+
    }

    mapClass('net.minecraft.nbt.ShortTag') {
        constructor(short)
        method(short, 'getAsShort')
        method(it.name, 'valueOf', short) // 1.15+
    }

    mapClass('net.minecraft.nbt.StringTag') {
        constructor(String)
        method(it.name, 'valueOf', String) // 1.15+
    }


    mapClass('net.minecraft.world.item.ItemStack') {
        method(it.name, 'copy')
        method(CompoundTag, 'save', CompoundTag)
        method(CompoundTag, 'getTag')
        method(void, 'setTag', CompoundTag)
    }

    // 1.10.x compat
    var EnumZombieType = mapClass('net.minecraft.server.VVV.EnumZombieType') { // Spigot mapped
        enumConstant('HUSK')
    }

    mapClass('net.minecraft.world.entity.monster.Zombie') {
        setter(EnumZombieType, 'villagerType') // Spigot mapped
        getter(EnumZombieType, 'villagerType') // Spigot mapped
        field(Attribute, 'SPAWN_REINFORCEMENTS_CHANCE')
    }

    /* 1.8.8 compat start */
    // Particles
    var EnumParticle = mapClass('net.minecraft.server.VVV.EnumParticle') { // Spigot mapped
        method('net.minecraft.util.EnumParticleTypes', 'func_179342_a', int) // Searge mapped
    }

    mapClass('net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket') {
        constructor(EnumParticle, boolean, float, float, float, float, float, float, float, int, int[]) // Spigot mapped
    }

    mapClass('net.minecraft.server.level.ServerLevel') {
        method(void, 'func_180505_a', 'net.minecraft.util.EnumParticleTypes', boolean, double, double, double, int, double, double, double, double, int[]) // Searge mapped
    }

    // Attributes
    mapClass('net.minecraft.world.entity.ai.attributes.Attributes') {
        field(Attribute, 'MAX_HEALTH')
        field(Attribute, 'FOLLOW_RANGE')
        field(Attribute, 'KNOCKBACK_RESISTANCE')
        field(Attribute, 'MOVEMENT_SPEED')
        field(Attribute, 'FLYING_SPEED')
        field(Attribute, 'ATTACK_DAMAGE')
        field(Attribute, 'ATTACK_SPEED')
        field(Attribute, 'ARMOR')
        field(Attribute, 'ARMOR_TOUGHNESS')
        field(Attribute, 'LUCK')
    }

    mapClass('net.minecraft.world.entity.animal.horse.Horse') {
        field('net.minecraft.server.VVV.IAttribute', 'attributeJumpStrength') // Spigot mapped
    }

    var AttributeModifier = mapClass('net.minecraft.world.entity.ai.attributes.AttributeModifier') {
        getter(double, 'amount') // amount
        method(int, 'func_111169_c') // operation (ordered: 0,1,2), Searge mapped
        getter(String, 'name') // name
        getter(UUID, 'id') // unique id

        constructor(UUID, String, double, int)
    }

    mapClass('net.minecraft.world.entity.ai.attributes.AttributeInstance') {
        constructor(Attribute, Consumer)
        setter(double, 'baseValue') // set base value

        getter(Attribute, 'attribute') // attribute type
        getter(double, 'baseValue') // get base value
        methodChain {
            it.item(Set, 'getModifiers')
            it.item(Collection, 'getModifiers')
        } // get modifiers
        method(void, 'addModifier', AttributeModifier) // add modifier
        method(void, 'removeModifier', AttributeModifier) // remove modifier
        getter(double, 'value') // get value
    }

    var AttributeSupplier = mapClass('net.minecraft.world.entity.ai.attributes.AttributeSupplier') {
        field(Map, 'instances')
    }

    mapClass('net.minecraft.world.entity.ai.attributes.AttributeMap') {
        method('net.minecraft.world.entity.ai.attributes.AttributeInstance', 'registerAttribute', Attribute) // old
        // new
        field(AttributeSupplier, 'supplier')
    }


    // BossBars

    mapClass('net.minecraft.world.entity.boss.wither.WitherBoss') {
        constructor('net.minecraft.server.VVV.World') // Spigot mapped
    }

    mapClass('net.minecraft.world.entity.boss.enderdragon.EnderDragon') {
        constructor('net.minecraft.server.VVV.World') // Spigot mapped
        field('net.minecraft.world.entity.boss.EnderDragonPart[]', 'subEntities')
    }

    mapClass('net.minecraft.network.protocol.game.ClientboundChatPacket') {
        constructor('net.minecraft.server.VVV.IChatBaseComponent', byte) // Spigot mapped
    }

    mapClass('net.minecraft.world.level.block.entity.BlockEntity') {
        method(void, 'setChanged')
    }

    mapClass('net.minecraft.server.VVV.TileEntityFlowerPot') { // Spigot mapped
        method(void, 'func_145964_a', 'net.minecraft.item.Item', int) // Searge mapped
        getter('net.minecraft.server.VVV.Item', 'item') // Spigot mapped
        getter(int, 'data')
    }

    /* 1.8.8 compat end */

    mapClass('net.minecraft.world.entity.item.PrimedTnt') {
        field(LivingEntity, 'owner')
    }

    mapClass('net.minecraft.world.entity.EntityType$EntityFactory') {
        method(Entity, 'create', EntityType, Level)
    }
}
